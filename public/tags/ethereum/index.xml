<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ethereum on Ken&#39;s Blog</title>
    <link>/tags/ethereum/</link>
    <description>Recent content in Ethereum on Ken&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 14 Apr 2023 07:54:06 +0000</lastBuildDate><atom:link href="/tags/ethereum/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>無須抵押品就可以貸款？利用 Aave 實作閃電貸智能合約（下）</title>
      <link>/post/flash-laon-2/</link>
      <pubDate>Fri, 14 Apr 2023 07:54:06 +0000</pubDate>
      
      <guid>/post/flash-laon-2/</guid>
      <description>上一篇我們介紹了甚麼是閃電貸，並且介紹了閃電貸的使用場景，這篇我們將介紹閃電貸的合約是如何實現的，並且用 Aave 實作出來。
Photo by Jason D on Unsplash 閃電貸流程 首先，我們先來看看 Aave 閃電貸的流程是甚麼
對你的合約發起一個交易，你的合約會呼叫 Aave pool 合約裡面的 FlashLoanSimple() 並指定這次閃電貸要借的 token 數量。 Aave pool 合約執行 FlashLoanSimple() 轉移要借出的 token 到你的合約，並且執行你的合約中的 executeOperation()。 現在你的合約中擁有從 Aave 借來的貸款，並且可以做你想做的任何事情，等到 executeOperation() 執行成功後，Aave pool 合約會從你的合約中把應該要還的錢加上費用一同償還給 Aave。 以上所有事情都發生在同一個 transaction 中，因此也會在同一個 block。 Aave 閃電貸合約簡介 接下來我們透過程式碼來實際看看 Aave 的 FlashLoanSimple() 流程，以下只會列出跟閃電貸有關的程式碼，有興趣的讀者可以到他們的 GitHub 觀看完整的程式碼。
以下是 FlashLoanSimple() 的完整程式碼，可以看到最下面一行的 executeFlashLoanSimple() 才是真正在執行閃電貸的程式碼。 // Pool.sol function flashLoanSimple( address receiverAddress, address asset, uint256 amount, bytes calldata params, uint16 referralCode ) public virtual override { DataTypes.</description>
    </item>
    
    <item>
      <title>無須抵押品就可以貸款？利用 Aave 實作閃電貸智能合約（上）</title>
      <link>/post/flash-loan-1/</link>
      <pubDate>Sun, 12 Mar 2023 19:51:58 +0000</pubDate>
      
      <guid>/post/flash-loan-1/</guid>
      <description>在 Defi 的領域中，閃電貸扮演著一個非常重要的角色，他是一把雙面刃，本系列將分成上下兩篇文章分別介紹閃電貸以及如何利用去中心化借貸平台 Aave 來實作閃電貸智能合約。
Photo by Jason D on Unsplash 甚麼是閃電貸？ 閃電貸是一種無需抵押品便可以獲得貸款的方式，而且貸款沒有限制，這是利用以太坊上的交易機制來達到的。在同一筆交易中借款還款，交易完成後，以區塊的角度來看，你的餘額完全沒有改變 ，但其實你已經借了幾百萬美金又還款了，這就是閃電貸的基本原理。
但你可能會問，如果我沒有還款不就可以拿走這些錢了嗎？以太坊的交易機制保證一筆交易要馬全部執行，要馬完全不執行。如果借款人在交易結束前沒有還款，該交易就會被 revert，回到借款發生前的 state，也就是說借款從來沒有發生過。因此，不會發生未還款就完成交易的情況。使用者只會損失這筆交易執行到一半所耗費的 gas fee 而已。
常見的閃電貸使用方式 因為閃電貸無須抵押品，並且可以立即得到一大筆資金，因此閃電貸的用途涵蓋了非常廣的範圍，以下將介紹幾個閃電貸常用的使用方式。需要注意的是這些使用方式通通都是在一個 transaction 中完成的。
P.S. 以下範例並沒有將 Defi protocol 的手續費以及 gas fee 考慮進去，在實務上這些都是很重要的一點，例如 Aave 對於使用閃電貸的人會收取一定比例的費用，根據官方文檔，目前是 0.09% ，但是會隨著社區治理而變動。
https://www.moonpay.com/learn/defi/defi-flash-loans
套利 Arbitrage 利用閃電貸套利的方式非常多種，以下將解釋最常見的套利方式，利用不同交易所的價格差來進行套利。
假設：
ETH 在 Uniswap 的價格：2000 ETH 在 Sushiswap 的價格：2001 套利步驟為：
在去中心化借貸平台如 Aave 使用閃電貸借入一筆 USDC。 在 Uniswap 以 2000 的價格買入 ETH。 在 Sushiswap 以 2001 的價格賣掉 ETH。 向 Aave 償還 USDC 貸款。 賺取差價利潤。 https://www.</description>
    </item>
    
    <item>
      <title>公鑰、私鑰、地址傻傻分不清！？</title>
      <link>/post/ethereum-address-system/</link>
      <pubDate>Sun, 19 Feb 2023 19:35:41 +0000</pubDate>
      
      <guid>/post/ethereum-address-system/</guid>
      <description>在區塊鏈的世界中，我們時常會用到私鑰簽署交易，但我們真的理解私鑰的意義嗎？而公鑰又是甚麼？和地址又有甚麼區別呢？然而每條區塊鏈所用的 加密方式都不盡相同，本文將會以 Ethereum 為例深入探討這些看似簡單卻又複雜的問題。
Photo by Jason D on Unsplash 私鑰 Private Key 首先，我們先來探討甚麼是私鑰？ It is assumed that the sender has a valid private key pr, which is a randomly selected positive integer (represented as a byte array of length 32 in big-endian form) in the range [1, secp256k1n − 1].
上面是引用 Ethereum 黃皮書對私鑰的介紹，其中 \(\ secp256k1n = 2^{256}\) 。私鑰其實就是一串隨機數，具體而言，以太坊的私鑰是一串隨機正整數，而這個值的區間位於 \(1\) ~ \(2^{256}\) 之間，也就是說，它是一串隨機生成的 256 bits 序列。這個 range 是非常巨大的，要生成兩個一樣的私鑰是一件幾乎不可能會發生的事。（如果你無法想像 \(2^{256}\) 實際到底有多大，可以觀看以下影片） 2²⁵⁶ 實際到底有多大？ 而私鑰為甚麼會如此重要呢？ 在真實的世界中，「擁有」的定義是領有、具有，得到或者保持著某種東西，你可以透過出示地契證明你擁有某一棟房子。但在區塊鏈的世界中，擁有某個東西只不過是在帳本上將你的資產做加法，並且用數學的方式證明它的存在，當全世界的人都認可這個紀錄，那麼你就擁有它，儘管你其實並沒有實際擁有任何東西。簡單來講，當你知道你的私鑰的時候，你就擁有你所有的貨幣資產，包括 NFT 和 Token，因為多數人都能夠證明這條紀錄是千真萬確的。</description>
    </item>
    
  </channel>
</rss>
